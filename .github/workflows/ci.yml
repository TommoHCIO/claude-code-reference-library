name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Quality Checks Job
  quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: |
          find . -name "package.json" -not -path "*/node_modules/*" -execdir npm ci \;
        
      - name: Type check
        run: |
          find . -name "tsconfig.json" -not -path "*/node_modules/*" -execdir npx tsc --noEmit \; 2>/dev/null || true
        
      - name: Lint code
        run: |
          find . -name "package.json" -not -path "*/node_modules/*" -exec dirname {} \; | while read dir; do
            if [ -f "$dir/package.json" ] && grep -q "lint" "$dir/package.json"; then
              cd "$dir" && npm run lint || true
              cd - > /dev/null
            fi
          done
        
      - name: Format check
        run: |
          find . -name "package.json" -not -path "*/node_modules/*" -exec dirname {} \; | while read dir; do
            if [ -f "$dir/package.json" ] && grep -q "format:check" "$dir/package.json"; then
              cd "$dir" && npm run format:check || true
              cd - > /dev/null
            fi
          done
        
      - name: Run unit tests
        run: |
          find . -name "package.json" -not -path "*/node_modules/*" -exec dirname {} \; | while read dir; do
            if [ -f "$dir/package.json" ] && grep -q "test" "$dir/package.json"; then
              cd "$dir" && npm test || true
              cd - > /dev/null
            fi
          done
        
      - name: Generate test coverage
        run: |
          find . -name "package.json" -not -path "*/node_modules/*" -exec dirname {} \; | while read dir; do
            if [ -f "$dir/package.json" ] && grep -q "test:coverage" "$dir/package.json"; then
              cd "$dir" && npm run test:coverage || true
              cd - > /dev/null
            fi
          done
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Build Job
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          
      - name: Install dependencies
        run: |
          find . -name "package.json" -not -path "*/node_modules/*" -execdir npm ci \;
          
      - name: Build projects
        run: |
          find . -name "package.json" -not -path "*/node_modules/*" -exec dirname {} \; | while read dir; do
            if [ -f "$dir/package.json" ] && grep -q "build" "$dir/package.json"; then
              cd "$dir"
              echo "Building in $dir"
              npm run build || echo "Build failed or not available in $dir"
              cd - > /dev/null
            fi
          done
          
      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            **/dist/
            **/.next/
            **/build/
          retention-days: 7
          
      - name: Package components
        run: |
          # Create distribution package
          mkdir -p dist/components
          mkdir -p dist/templates
          mkdir -p dist/design-tokens
          mkdir -p dist/patterns
          
          # Copy components
          cp -r components/* dist/components/ 2>/dev/null || true
          cp -r templates/* dist/templates/ 2>/dev/null || true
          cp -r design-tokens/* dist/design-tokens/ 2>/dev/null || true
          cp -r patterns/* dist/patterns/ 2>/dev/null || true
          
          # Copy documentation
          cp README.md dist/
          
          # Create package info
          echo "Claude Code Reference Library v$(date +%Y.%m.%d)" > dist/VERSION
          
      - name: Upload package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: claude-code-reference-package
          path: dist/
          retention-days: 30

  # Security Scan Job
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run security audit
        run: |
          find . -name "package.json" -not -path "*/node_modules/*" -execdir npm audit --audit-level moderate \; || true
          
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium
          
      - name: Upload Snyk results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # Visual Testing Job (Playwright)
  visual-tests:
    name: Visual Testing
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          find . -name "package.json" -not -path "*/node_modules/*" -execdir npm ci \;
          
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium firefox webkit
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          
      - name: Run Playwright tests
        run: |
          find . -name "playwright.config.*" -exec dirname {} \; | while read dir; do
            if [ -f "$dir/playwright.config.ts" ] || [ -f "$dir/playwright.config.js" ]; then
              cd "$dir"
              echo "Running Playwright tests in $dir"
              npx playwright test || true
              cd - > /dev/null
            fi
          done
          
      - name: Upload Playwright reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: |
            **/test-results/
            **/playwright-report/
          retention-days: 7

  # Documentation Job  
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [quality, build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci 2>/dev/null || echo "No root package.json found"
        
      - name: Build documentation
        run: |
          # Generate component documentation
          mkdir -p docs/components
          mkdir -p docs/patterns
          mkdir -p docs/templates
          
          # Copy README files and create index
          find . -name "README.md" -not -path "./README.md" -exec cp {} docs/ \;
          
          # Generate component index
          echo "# Component Documentation" > docs/components/README.md
          find components -name "*.tsx" -o -name "*.ts" | while read file; do
            echo "- [$(basename $file .tsx)](../$file)" >> docs/components/README.md
          done
          
          echo "Documentation built successfully"
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          force_orphan: true

  # Release Job
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [quality, build, security, visual-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Download package artifacts
        uses: actions/download-artifact@v3
        with:
          name: claude-code-reference-package
          path: ./release-package/
          
      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s" -n 20)
          else
            COMMITS=$(git log $LAST_TAG..HEAD --oneline --pretty=format:"- %s")
          fi
          
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            🚀 **Claude Code Reference Library Release v${{ github.run_number }}**
            
            Generated with Claude Code SOP Methodology
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## 📦 Included Components
            - UI Components (Button, Card, Input, etc.)
            - Layout Components (Sidebar, Navigation)
            - Data Visualization (Charts, Dashboard)
            - Form Examples with Validation
            - Design Token System
            - Development Patterns
            
            ## 🛠️ Installation
            Download the assets and integrate into your project following the documentation.
            
            ---
            🤖 Auto-generated by GitHub Actions
          draft: false
          prerelease: false
          
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-package/
          asset_name: claude-code-reference-library-v${{ github.run_number }}.zip
          asset_content_type: application/zip

  # Notification Job
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    if: always()
    needs: [quality, build, security, visual-tests, docs, release]
    
    steps:
      - name: Notify Success
        if: ${{ needs.quality.result == 'success' && needs.build.result == 'success' }}
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "- Code quality checks: PASSED"
          echo "- Build: PASSED"
          echo "- Security scan: ${{ needs.security.result }}"
          echo "- Visual tests: ${{ needs.visual-tests.result }}"
          
      - name: Notify Failure
        if: ${{ needs.quality.result == 'failure' || needs.build.result == 'failure' }}
        run: |
          echo "❌ CI/CD Pipeline failed!"
          echo "- Code quality checks: ${{ needs.quality.result }}"
          echo "- Build: ${{ needs.build.result }}"
          echo "Please check the logs and fix the issues."
          exit 1